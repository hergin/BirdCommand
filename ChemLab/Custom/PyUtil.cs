using ChemLab.Model;
using Dalssoft.DiagramNet;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;

namespace ChemLab.Custom
{
    public class PyUtil
    {
        public static String CallPython(String programName, String argument)
        {
            // https://betterprogramming.pub/running-python-script-from-c-and-working-with-the-results-843e68d230e5
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = @"Resources\WPy64-39100\python-3.9.10.amd64\python.exe";
            start.Arguments = string.Format("\"{0}\" \"{1}\"",
                @"Resources\" + programName,
                argument);
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            using (Process process = Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                    string result = reader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")
                    if (string.IsNullOrEmpty(stderr))
                    {
                        return result;
                    }
                    else
                    {
                        throw new Exception(stderr);
                    }
                }
            }
        }

        public static bool IsPatternInTheModelChemistry(List<BaseElement> model, List<BaseElement> prePattern)
        {
            var mazeGraph = ConvertUtil.PatternToGraphChemistry(model);

            var patternGraph = ConvertUtil.PatternToGraphChemistry(prePattern);

            var resultFromPY = PyUtil.CallPython("pattern-matching-chemistry.py",
                mazeGraph.NodesToPY() + "|" + mazeGraph.EdgesToPY() + "|" + patternGraph.NodesToPY() + "|" + patternGraph.EdgesToPY());

            var lines = resultFromPY.Split(new char[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);

            return lines[0].Trim() == "True";
        }


        internal static List<ChangeStep> FindChangesInTheRuleChemistry(List<BaseElement> preConditionElements, List<BaseElement> postConditionElements)
        {
            var result = new List<ChangeStep>();

            var prePatternGraph = ConvertUtil.PatternToGraphChemistry(preConditionElements);
            var postPatternGraph = ConvertUtil.PatternToGraphChemistry(postConditionElements);

            var resultFromPY = PyUtil.CallPython("difference-finding.py",
                prePatternGraph.NodesToPY() + "|" + prePatternGraph.EdgesToPY() + "|" + postPatternGraph.NodesToPY() + "|" + postPatternGraph.EdgesToPY());

            var lines = resultFromPY.Split(new char[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);

            List<BaseElement> allElements = new List<BaseElement>();
            allElements.AddRange(preConditionElements);
            allElements.AddRange(postConditionElements);

            var mode = ChangeStepType.Add;
            foreach (var line in lines)
            {
                switch (line.Trim())
                {
                    case "Nodes To Add":
                        mode = ChangeStepType.Add;
                        continue;
                    case "Nodes To Delete":
                        mode = ChangeStepType.Delete;
                        continue;
                    case "-----":
                    case "Edges To Add":
                    case "Edges To Delete":
                        continue;
                    default:
                        var symbol = line.Trim();
                        switch (mode)
                        {
                            case ChangeStepType.Add:
                                var ionCellToAdd = (IonCell)postConditionElements.Find(e => ((IonCell)e).GetCompound().Symbol == symbol);
                                var changeStepAdd = new ChangeStep { Compound = ionCellToAdd.GetCompound(), Type = mode };
                                result.Add(changeStepAdd);
                                continue;
                            case ChangeStepType.Delete:
                                var ionCellToDelete = (IonCell)preConditionElements.Find(e => ((IonCell)e).GetCompound().Symbol == symbol);
                                var changeStepDelete = new ChangeStep { Compound = ionCellToDelete.GetCompound(), Type = mode };
                                result.Add(changeStepDelete);
                                continue;
                        }



                        continue;
                }
            }
            return result;
        }

    }
}
